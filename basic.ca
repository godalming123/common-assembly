print :: (str arg rsi, strLen arg rdx, mem1 mut rax, mem2 mut rdi) {
	mem1 = 1
	mem2 = 1
	# TODO: Instead of `syscall`, for the user to say `syscall mut str, mut strLen, mut mem1, mut mem2` so that every possible mutation is explicit
	syscall
}

main :: (mem1 mut rax, mem2 mut rdi, mem3 mut rsi, mem4 mut rdx) {
	mem3 = "Hello"
	mem4 = 5
	print mem3, mem4, mem1, mem2
	
	mem3 = "World!\n"
	mem4 = 7
	print mem3, mem4, mem1, mem2

	mem1 = 60 # sys_exit syscall
	mem2 = 5 # exit status
	mem3 = 3
	pow mut mem2, mut mem3 # mem2 -> 5 ^ 3 -> 125
	                       # mem3 -> 1
	syscall
}

# Calculates x^y. Sets x to the result, and if y was greater then 1, then y is set to 1.
# Here, x and y could occupy any registers since the code does not specify
pow :: (x mut, y mut) {
	while y > 1 {
		x *= x
		y--
	}
}

