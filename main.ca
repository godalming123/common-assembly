fn r0, r1, r2, r3, r4, r5, r8, r12, r13 = main() {
	# When calling a function, if you name a register for the function arg, then you have to update
	# the value of the register, and if you use a variable, then you should update it's value on the
	# line before. This forces you to use registers as temporary data stores that are only used to call
	# one function, and variables as slightly more permanent data stores.

	# TODO: Stop assuming that the page size is 4096 bits in this program

	# Print "Enter you name: \n"
	r0 = sysWrite(r5=1, r4="Enter your name: ", r3=17) # Here, instead of nothing after `r0`, you could use a name to reserve that register for a variable of that name

	# Setup variables to keep track of the program break
	r0 progBreak = sysBrk(r5=0)
	r13 originalBreak = progBreak
	r12 bufferCurrentPos = progBreak
	r8 currentBreak = drop progBreak # Drop means that we no longer use the break variable, and it can now be used as a normal register

	# Loop to store user input in `originalBreak`, and increase the program break as necersarry
	while true {
		if bufferCurrentPos >= currentBreak {
			currentBreak += 4096
			r0 = sysBrk(r5=currentBreak)
		}
		r0 returnCode = sysRead(r5=0, r4=bufferCurrentPos, r3=1)
		if returnCode < 0 {
			# After a register has been reserved for a variable, the only way to access the register is with just the variable name without naming the register
			returnCode = sysExit(r5=returnCode)
		} elif returnCode == 0 or ^bufferCurrentPos == '\n' {
			break
		}
		bufferCurrentPos += 8
	}

	# Print the text the user entered
	r0 = sysWrite(r5=1, r4="You entered: ", r3=13)
	r3 inputLen = drop bufferCurrentPos
	inputLen -= originalBreak
	# TODO: Fix /= and *=
	# inputLen /= 8
	r0 = sysWrite(r5=1, r4=originalBreak, drop inputLen)

	# Free all of the text that the user entered, except 1 page which will be used to store a counter
	r5 newBreak = originalBreak
	newBreak += 4096
	r0 = sysBrk(drop newBreak)

	# Print `Counting from 0 to 9...\n`
	r0 = sysWrite(r5=1, r4="\nCounting from 0 to 9...\n", r3=25)

	# Print the numbers 0 through 9
	r4 charToPrint = originalBreak
	^charToPrint = '0'
	while true {
		r0 = sysWrite(r5=1, charToPrint, r3=1)
		^charToPrint++
		charToPrint = "\n"
		r0 = sysWrite(r5=1, charToPrint, r3=1)
		charToPrint = originalBreak
		if ^charToPrint > '9' {
			break
		}
	}
	drop charToPrint

	# Check if a point is on the screen
	r0 onScreen = pointIsOnScreen(r0=300, r1=30, r2=100, r3=250, r4=0)
	if drop onScreen == 0 {
		r0 = sysWrite(r5=1, r4="Point is not on the screen\n", r3=27)
	} else {
		r0 = sysWrite(r5=1, r4="Point is on the screen\n", r3=23)
	}
}

fn r0 onScreen = pointIsOnScreen (r0=pointX, r1=pointY, r2=screenWidth, r3=screenHeight, r4=alwaysReturnTrue) {
	# This is just to test the compilation of complex conditions
	if alwaysReturnTrue != 0 or (0 <= pointX < screenWidth and 0 <= pointY < screenHeight) {
		return r0=1
	} else {
		return r0=0
	}
}

# Calculates base^power. `base` is set to the result, and `power` is set to `min(index, 1)`
fn r0 result, r1 = pow (r0=base, r1=power) {
	# In code where a register is used as an argument, and a mutator, you refer to
	# the register as the name given to the argument, but you can also `drop` that
	# name to use it as a normal register.
	while power > 1 {
		base *= base
		power--
	}
	return r0=base
	# TODO: Support this updated code that uses the `loop` instruction in x86
	# assembly to be faster
	# if power <= 1 {
	# 	return
	# }
	# power--
	# do {
	# 	base *= base
	# } while decAndContinueIfNotZero mutArg y

	# The code above would compile to the following x86-64 assembly:
	# cmp ecx, 1
	# jle end ; If ecx <= 0, jump to end
	# dec ecx
	# loop:
	#     mul x, x
	#     ; Exactly like `dec ecx`, then `jnz loop`, except it doesn't set flags,
	#     ; and is faster
	#     loop loop
	# end:
}
